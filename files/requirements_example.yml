# Copyright (c) 2019 Intel Corporation. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
# Below is a complete example of "enumerated" node composition. Based on the
# variables set below it will create 5 nodes with:
# - at least 1 CPU with 20 cores clocked 3000Mhz, but at least 30 cores in the
#   overall system, and one remote FPGA;
# - 20GB of memory of type DDR4 and speed 2400Mhz but 40GB of overall system
#   memory
# - 1 local NVMe drive of at least 100GB and 2 remote NVMe drives sized at
#   least 80GB and 20GB
# - 1 ethernet interface capable of 10G


# This variable defines the number of nodes to be created by the role
# During the role execution an index up to this number will be used to
# generate a unique name for each node. For example: assuming a value of 3 and
# a node name set to 'test', the role will generate unique names as follow:
# test_01, test_02, test_03.
number_of_nodes_to_provision: 5


# Following are either specific requirements (types, protocols, etc) or
# quantities to define the specification of the nodes to be composed. For
# each quantity PODM will match or exceed them or fail. Constraints for
# processors, memory slots, drives and interfaces can be repeated up to the
# desired amount (that is, they represent a list of entities containing
# key-value specified requirements).
# To avoid providing one requirement, simply comment out the related variable.

# Name assigned to the composed node
rsd_node_name: compute

# A short text description associated to node e.g. "OpenStack Compute Node"
rsd_node_description: "OpenStack Compute Node"

# The composed node will have at lest the amount CPU cores here specified,
# potentially accross multiple CPUs 
rsd_node_cores: 30

# Minimum amount of memory for the whole system, in MiB unit
rsd_node_memory: 40000

# FPGA over fabric request and attachment, plus specific specs for a single CPU
rsd_node_processors:
  - { ProcessorType: FPGA, Connectivity: RemotePCIe }
  - { ProcessorType: CPU, AchievableSpeedMHz: 3000, TotalCores: 20 }

# Memory requirements, for requesting specific memory technologies, speeds, etc.
rsd_node_memory_spec:
  - { CapacityMiB: 20000, MemoryDeviceType: DDR4, SpeedMHz: 2400 }

# List of local drives to assigned to the node and their specifications, such
# as capacity, type and interface
rsd_node_local_drives:
  - { CapacityGiB: 100, Type: SSD, Interface: NVMe }

# List of remote drives to be attached to the node with their size and other
# desired characteristics
rsd_node_remote_drives:
  - { CapacityGiB: 80, Protocol: NVMeOverFabrics }
  - { CapacityGiB: 20, Protocol: NVMeOverFabrics }

# List of interfaces and their desired specifications, such as their desired
# link speed
rsd_node_eth_interfaces:
  - { SpeedMbps: 10000 }

# In case it's preferred to have control over the proposed node specification
# before actually instantiating the node, just use 'allocated' for review and
# subsequent deletion ('absent') or assembly ('assembled')
rsd_node_state: assembled

# This function set node booting options. Boot_target and boot_enable are
# mandatory arguments to perform overwrite boot option action,
# boot_mode is optional.
rsd_boot_option:
   boot_target: hdd
   boot_enable: once
   boot_mode: legacy
